W_ <- NULL
# Storing value of training data
Y_train_ <- NULL
X_train_ <- NULL
W_train_ <- NULL
# Storing value of counter data
Y_counter = Y
X_counter = X
W_counter = W
# Sotring value of beta and psi
Beta = c()
psi_stack = c()
res_stack = c()
for (i in 1:(K-1)) {
print(i)
#Step 1: We split X, W and Y into K random subsets, with the i th set will use for testting
#        and the remaning observation for training the model
split <- sample(seq_len(length(Y_counter)), size = ceiling(length(Y)/K))
Y_[[i]] = Y_counter[split]
Y_train_[[i]] = Y[-split]
Y_counter = Y_counter[-split]
X_[[i]] = X_counter[split]
X_train_[[i]] = X[-split]
X_counter = X_counter[-split]
W_[[i]] = W_counter[split,]
W_train_[[i]] = W[-split,]
W_counter = W_counter[-split,] }
Y_counter[split]
Y_counter
x= 3
y=2
print(x, y)
print(x)
print(y)
print([y])
install.packages('sinib')
library('sinib')
X = rnorm(10)*10
P = runif(10)
P
set.seed(123)
X = rnorm(10)*10
P = runif(10)
Y = rbinom(1,X,P)
Y = rbinom(1,X[1],P[1])
X[1]
P[1]
Y = rbinom(1,X[1],P[1])
rbinom(1,X[1],P[1])
rbinom(1,X[1],P[1])
Y = rbinom(2,X[1],P[1])
rbinom(10,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
rbinom(1,1,.5)
P[1]
P[1]
X[1]
X = runif(10)*1000
X = round(runif(10)*1000)
X
P = runif(10)
Y = rbinom(1,X[1],P[1])
Y
Y = c(0:lth)
lth = 10
set.seed(123)
X = round(runif(lth)*1000)
P = runif(lth)
Y = c(0:lth)
Y = c(1:lth)
Y
Y = c(1:lth)*0
X = data.frame(matrix(nrow=N,ncol=lth))
N = 500
Xdf = data.frame(matrix(nrow=N,ncol=lth))
X = data.frame(matrix(nrow=N,ncol=lth))
X[j] = round(runif(lth)*1000)
j=0
X[j] = round(runif(lth)*1000)
X[j,:] = round(runif(lth)*1000)
j=1
X[j,:] = round(runif(lth)*1000)
X[j,] = round(runif(lth)*1000)
Y = vector(length = N)
Y = vector(mode=numeric(),length = N)
Y = vector(mode="numeric",length = N)
for i in 1:lth {
Y[j] = Y[j] + rbinom(1,X[i],P[i])
}
Y[j] = Y[j] + rbinom(1,X[i],P[i])
for i in 1:lth {
Y[j] = Y[j] + rbinom(1,X[i],P[i])
}
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[i],P[i])
}
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[j,i],P[i])
}
X[j,i]
P = runif(lth)
X = data.frame(matrix(nrow=N,ncol=lth))
Y = vector(mode="numeric",length = N)
for j in 1:N {
j=1
X[j,] = round(runif(lth)*1000)
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[j,i],P[i])
}
}
set.seed(123)
P = runif(lth)
X = data.frame(matrix(nrow=N,ncol=lth))
Y = vector(mode="numeric",length = N)
for (j in 1:N) {
j=1
X[j,] = round(runif(lth)*1000)
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[j,i],P[i])
}
}
df <- cbind(Y,X)
P = runif(lth)
X = data.frame(matrix(nrow=N,ncol=lth))
Y = vector(mode="numeric",length = N)
for (j in 1:N) {
X[j,] = round(runif(lth)*1000)
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[j,i],P[i])
}
}
df <- cbind(Y,X)
library('sinib')
lth = 10
N = 500
set.seed(123)
P = runif(lth)
X = data.frame(matrix(nrow=N,ncol=lth))
Y = vector(mode="numeric",length = N)
for (j in 1:N) {
X[j,] = round(runif(lth)*1000)
for (i in 1:lth) {
Y[j] = Y[j] + rbinom(1,X[j,i],P[i])
}
}
df <- cbind(Y,X)
Y = c(1:10)
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
sam
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
sam
seq_len(length(Y))
(length(Y))
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
split <- split(sam, sample(rep(1:K)))
split <- split(sam, sample(rep(1:5)))
split
seq_len(length(Y))
seq_len(length(Y))
(length(Y))
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
sam
split <- split(sam, sample(rep(1:5)))
split
unlist(split[1])
unlist(split[1])[0]
unlist(split[1])
Y = c(1:10)
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
split <- split(sam, sample(rep(1:5)))
unlist(split[1])
c(1:10)
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
sam
split <- split(sam, sample(rep(1:5)))
split
seq_len(length(Y))
(length(Y))
sam <- sample.int(seq_len(length(Y)), size=(length(Y)), replace=TRUE)
sam
sam <- sample.int(sc(1:10), size=10, replace=TRUE)
sam <- sample.int(c(1:10), size=10, replace=TRUE)
sam
install.packages('rmarkdown')
install.packages('evaluate')
install.packages('rmarkdown')
install.packages('htmltools')
install.packages('rmarkdown')
install.packages('knitr')
install.packages('highr')
install.packages('knitr')
install.packages('stringr')
install.packages('stringi')
install.packages('stringr')
install.packages('knitr')
install.packages('rmarkdown')
setwd("/home/hannah/repos/pse-ml/lab3/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('rpart.plot')
install.packages('devtools')
install.packages('processx')
install.packages('callr')
install.packages('DT')
install.packages('htmlwidgets')
install.packages('shiny')
install.packages('httpuv')
install.packages('promises')
install.packages('httpuv')
setwd("/home/hannah/repos/pse-ml/lab3/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('lazyeval')
install.packages('cli')
install.packages('assertthat')
install.packages('cli')
install.packages('fansi')
install.packages('cli')
install.packages('assertthat')
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('timeDate')
install.packages('memoise')
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('lubridate')
install.packages('pkgbuild')
install.packages('prettyunits')
install.packages('pkgbuild')
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('pkgload')
install.packages('desc')
install.packages('rprojroot')
install.packages('desc')
install.packages('pkgload')
install.packages('pkgload')
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('remotes')
install.packages('reshape2')
install.packages('devtools')
install.packages('sessioninfo')
install.packages('devtools')
install.packages('caret')
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('tidyverse')
install.packages('broom')
install.packages('tidyr')
install.packages('tidyverse')
install.packages('broom')
install.packages('tidyverse')
install.packages('dbplyr')
install.packages('DBI')
install.packages('dbplyr')
install.packages('tidyverse')
install.packages('forcats')
install.packages('tidyverse')
install.packages('haven')
install.packages('hms')
install.packages('haven')
install.packages('tidyverse')
install.packages('httr')
install.packages('tidyverse')
install.packages('jsonlite')
install.packages('tidyverse')
install.packages('modelr')
install.packages('tidyverse')
install.packages('readr')
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
install.packages('tidyverse')
install.packages('readxl')
install.packages('cellranger')
install.packages('readxl')
install.packages('cellranger')
install.packages('tidyverse')
install.packages('reprex')
install.packages('tidyverse')
install.packages('rvest')
install.packages('tidyverse')
install.packages('rstudioapi')
install.packages('tidyverse')
setwd("/home/hannah/repos/pse-ml/lab3/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# install causalTree package from Susan Athey's github
install_github('susanathey/causalTree')
library(causalTree)
select <- dplyr::select
# Set seed for reproducibility
set.seed(1)
install.packages("~/Téléchargements/causalTree_0.0.tar.gz", repos = NULL, type = "source")
cate_honesttree <- predict(honest_tree_prune, newdata = data.frame(Y=Y2, W2), type = "vector")
# Load data
my_data <- readRDS('social_voting.rds')
# Restrict the sample size
n_obs <- 33000 # Change this number depending on the speed of your computer. 6000 is also fine.
my_data <- my_data[sample(nrow(my_data), n_obs), ]
# Split data into 3 samples
folds = createFolds(1:nrow(my_data), k=3)
Y1 <- my_data[folds[[1]],1]
Y2 <- my_data[folds[[2]],1]
Y3 <- my_data[folds[[3]],1]
X1 <- my_data[folds[[1]],2]
X2 <- my_data[folds[[2]],2]
X3 <- my_data[folds[[3]],2]
W1 <- my_data[folds[[1]],3:ncol(my_data)]
W2 <- my_data[folds[[2]],3:ncol(my_data)]
W3 <- my_data[folds[[3]],3:ncol(my_data)]
### Creates a vector of 0s and a vector of 1s of length n (hack for later usage)
zeros <- function(n) {
return(integer(n))
}
ones <- function(n) {
return(integer(n)+1)
}
sl_lm = SuperLearner(Y = Y1,
X = data.frame(X=X1, W1, W1*X1),
family = binomial(),
SL.library = "SL.lm",
cvControl = list(V=0))
summary(sl_lm$fitLibrary$SL.lm_All$object)
ols_pred_0s <- predict(sl_lm, data.frame(X=zeros(nrow(W2)), W2, W2*zeros(nrow(W2))), onlySL = T)
ols_pred_1s <- predict(sl_lm, data.frame(X=ones(nrow(W2)), W2, W2*ones(nrow(W2))), onlySL = T)
cate_ols <- ols_pred_1s$pred - ols_pred_0s$pred
lasso = create.Learner("SL.glmnet", params = list(alpha = 1), name_prefix="lasso")
get_lasso_coeffs <- function(sl_lasso) {
return(coef(sl_lasso$fitLibrary$lasso_1_All$object, s="lambda.min")[-1,])
}
SL.library <- lasso$names
predict_y_lasso <- SuperLearner(Y = Y1,
X = data.frame(X=X1, W1, W1*X1),
family = binomial(),
SL.library = SL.library,
cvControl = list(V=0))
kept_variables <- which(get_lasso_coeffs(predict_y_lasso)!=0)
predict_x_lasso <- SuperLearner(Y = X1,
X = data.frame(W1),
family = binomial(),
SL.library = lasso$names,
cvControl = list(V=0))
kept_variables2 <- which(get_lasso_coeffs(predict_x_lasso)!=0) + 1 #+1 to include X
setwd("/home/hannah/repos/pse-ml/lab3/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# install causalTree package from Susan Athey's github
install_github('susanathey/causalTree')
library(causalTree)
select <- dplyr::select
# Set seed for reproducibility
set.seed(1)
#########
# SETUP #
########
# Set working directory
setwd("/home/hannah/repos/pse-ml/lab3/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart", "rpart.plot", "randomForest", "devtools", "tidyverse", "knitr", "SuperLearner", "caret", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# install causalTree package from Susan Athey's github
install_github('susanathey/causalTree')
library(causalTree)
select <- dplyr::select
# Set seed for reproducibility
set.seed(1)
# Load data
my_data <- readRDS('welfare.rds')
# Split data into 2 samples
folds = createFolds(1:nrow(my_data), k=2)
Y1 <- my_data[folds[[1]],14]
Y2 <- my_data[folds[[2]],14]
X1 <- my_data[folds[[1]],15]
X2 <- my_data[folds[[2]],15]
W1 <- my_data[folds[[1]],2:13]
W2 <- my_data[folds[[2]],2:13]
# Get formula
tree_fml <- as.formula(paste("Y", paste(names(W1), collapse = ' + '), sep = " ~ "))
### causal tree
causal_tree <- causalTree(formula = tree_fml,
data = data.frame(Y=Y1, W1),
treatment = X1,
split.Rule = "CT", #causal tree
split.Honest = F,
split.alpha = 1,
cv.option = "CT",
cv.Honest = F,
split.Bucket = T, #each bucket contains bucketNum treated and bucketNum control units
bucketNum = 5,
bucketMax = 100,
minsize = 250) # number of observations in treatment and control on leaf
# Get formula
tree_fml <- as.formula(paste("Y1", paste(names(W1), collapse = ' + '), sep = " ~ "))
### causal tree
causal_tree <- causalTree(formula = tree_fml,
data = data.frame(Y=Y1, W1),
treatment = X1,
split.Rule = "CT", #causal tree
split.Honest = F,
split.alpha = 1,
cv.option = "CT",
cv.Honest = F,
split.Bucket = T, #each bucket contains bucketNum treated and bucketNum control units
bucketNum = 5,
bucketMax = 100,
minsize = 250) # number of observations in treatment and control on leaf
# Get formula
tree_fml <- as.formula(paste("Y", paste(names(W1), collapse = ' + '), sep = " ~ "))
### causal tree
causal_tree <- causalTree(formula = tree_fml,
data = data.frame(Y=Y1, W1),
treatment = X1,
split.Rule = "CT", #causal tree
split.Honest = F,
split.alpha = 1,
cv.option = "CT",
cv.Honest = F,
split.Bucket = T, #each bucket contains bucketNum treated and bucketNum control units
bucketNum = 5,
bucketMax = 100,
minsize = 250) # number of observations in treatment and control on leaf
tree_fml
data.frame(Y=Y1, W1)
# Get formula
tree_fml <- as.formula(paste("y", paste(names(W1), collapse = ' + '), sep = " ~ "))
### causal tree
causal_tree <- causalTree(formula = tree_fml,
data = data.frame(Y=Y1, W1),
treatment = X1,
split.Rule = "CT", #causal tree
split.Honest = F,
split.alpha = 1,
cv.option = "CT",
cv.Honest = F,
split.Bucket = T, #each bucket contains bucketNum treated and bucketNum control units
bucketNum = 5,
bucketMax = 100,
minsize = 250) # number of observations in treatment and control on leaf
rpart.plot(causal_tree, roundint = F)
# Get formula
tree_fml <- as.formula(paste("Y", paste(names(W1), collapse = ' + '), sep = " ~ "))
Y1 <- as.vector(my_data[folds[[1]],14])
Y1 <- as.vector(my_data[folds[[1]],14])
Y1 <- vector(my_data[folds[[1]],14])
Y1 <- my_data[folds[[1]],14]
Y1 <- my_data[folds[[1]],14]$y
Y2 <- my_data[folds[[2]],14]$y
Y1 <- my_data[folds[[1]],14]$y
Y2 <- my_data[folds[[2]],14]$y
X1 <- my_data[folds[[1]],15]$w
X2 <- my_data[folds[[2]],15]$w
W1 <- my_data[folds[[1]],2:13]
W2 <- my_data[folds[[2]],2:13]
# Get formula
tree_fml <- as.formula(paste("Y", paste(names(W1), collapse = ' + '), sep = " ~ "))
### causal tree
causal_tree <- causalTree(formula = tree_fml,
data = data.frame(Y=Y1, W1),
treatment = X1,
split.Rule = "CT", #causal tree
split.Honest = F,
split.alpha = 1,
cv.option = "CT",
cv.Honest = F,
split.Bucket = T, #each bucket contains bucketNum treated and bucketNum control units
bucketNum = 5,
bucketMax = 100,
minsize = 250) # number of observations in treatment and control on leaf
rpart.plot(causal_tree, roundint = F)
