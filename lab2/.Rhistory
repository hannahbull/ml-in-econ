df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+0.1*rnorm(100))
library('tidyverse')
df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+0.1*rnorm(100))
library('tidyverse')
df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+0.1*rnorm(100))
fit <- lm(y ~ x1 + x2 + f1, data = df)
tidy(fit)
library('tidyverse')
library('broom')
df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+0.1*rnorm(100))
fit <- lm(y ~ x1 + x2 + f1, data = df)
tidy(fit)
library('tidyverse')
library('broom')
df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+rnorm(100))
fit <- lm(y ~ x1 + x2 + f1, data = df)
tidy(fit)
fit <- lm(y ~ x1 + x2 + f1, data = df)
tidy(fit)
fit <- lm(y ~ x1 + x2 + factor(f1), data = df)
tidy(fit)
library('tidyverse')
library('broom')
df <- data.frame(x1=rnorm(100), x2=rnorm(100), f1=sample(1:5, 100, replace=T))
df <- df %>% mutate(y=2*x1+3*x2+f1+rnorm(100))
fit <- lm(y ~ x1 + x2 + f1, data = df)
tidy(fit)
fit <- lm(y ~ x1 + x2 + factor(f1), data = df)
tidy(fit)
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse", "knitr", "haven", "stargazer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library("tidyverse")
library("knitr")
library("haven")
library("stargazer")
df <- read_csv("Data/ESGData.csv")
knitr::opts_chunk$set(echo = TRUE)
list.of.packages <- c("tidyverse", "knitr", "haven", "stargazer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library("tidyverse")
library("knitr")
library("haven")
library("stargazer")
df <- read_csv("Data/ESGData.csv")
list.of.packages <- c("tidyverse", "knitr", "haven", "stargazer")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
library("tidyverse")
library("knitr")
library("haven")
library("stargazer")
df <- read_csv("Data/ESGData.csv")
myvalue="I’m Nobody! Who are you?
Are you — Nobody — Too?
Then there’s a pair of us!
Don’t tell! They’d banish us — you know!
How dreary — to be — Somebody!
How public — like a Frog —
To tell one’s name — the livelong June —
To an admiring Bog!"
View(df)
df <- read_csv("Data/ESGData.csv")
View(df)
Table <- df %>%
filter(`Indicator Name`=="Fossil fuel energy consumption (% of total)"|`Indicator Name`=="GDP growth (annual %)")%>%
select(`Indicator Name`, value=`2005`) %>%
group_by(`Indicator Name`) %>%
summarise(mean = mean(`value`, na.rm=T),
sd = sd(`value`, na.rm=T),
min = min(`value`, na.rm=T),
max = max(`value`, na.rm=T)) %>%
ungroup()
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
spead(key = series_code, value = year)
df <- df %>%
mutate(year = as.numeric(year)) %>%
spread(key = series_code, value = year)
df <- df %>%
mutate(year = as.numeric(year)) %>%
group_by_at(vars(-year)) %>%  # group by everything other than the value column.
mutate(row_id=1:n()) %>% ungroup() %>% select(-country_var) %>%  # build group index
spread(key=series_code, value=year) %>%    # spread
select(-row_id)  # drop the index`
df <- df %>%
mutate(year = as.numeric(year)) %>%
group_by_at(vars(-year)) %>%  # group by everything other than the value column.
mutate(row_id=1:n()) %>%
ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year) %>%    # spread
select(-row_id)  # drop the index`
View(df)
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
group_by_at(vars(-year)) %>%  # group by everything other than the value column.
mutate(row_id=1:n()) %>%
ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year) %>%    # spread
select(-row_id)  # drop the index`
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
group_by_at(vars(-year)) %>%  # group by everything other than the value column.
mutate(row_id=1:n()) %>%
ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year) %>%    # spread
select(-row_id)  # drop the index`
View(df)
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year)
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
group_by_at(vars(-year)) %>%  # group by everything other than the value column.
mutate(row_id=1:n())
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
#group_by_at(vars(-year)) %>%  # group by everything other than the value column.
#mutate(row_id=1:n()) %>%
#ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year)
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
rowid_to_column() %>%
#group_by_at(vars(-year)) %>%  # group by everything other than the value column.
#mutate(row_id=1:n()) %>%
#ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year) %>%    # spread
select(-row_id)  # drop the index`
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
rowid_to_column() %>%
#group_by_at(vars(-year)) %>%  # group by everything other than the value column.
#mutate(row_id=1:n()) %>%
#ungroup() %>%
#select(-country_var) %>%  # build group index
spread(key=series_code, value=year)
df <- read_csv("Data/ESGData.csv")
### CLEANING df
# change names
names(df) <- c("country_name", "country_code", "series_name", "series_code", "year")
df <- df %>%
mutate(year = as.numeric(year)) %>%
select(country_name, series_code, year) %>%
rowid_to_column() %>%
spread(key=series_code, value=year)
knitr::opts_chunk$set(echo = TRUE)
require(knitr)
require(tidyverse)
require(stargazer)
require(xtable)
require(memisc)
include_graphics("https://cran.r-project.org/Rlogo.svg")
knitr::include_graphics("https://cran.r-project.org/Rlogo.svg")
knitr::include_graphics("/home/hannah/repos/introtor/Class1/Data/images/pipe.png")
knitr::include_graphics("/home/hannah/repos/introtor/Class1/Data/images/pipe.png")
include_graphics("/home/hannah/repos/introtor/Class1/Data/images/pipe.png")
install.packages(mailR)
install.packages("mailR")
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
system.file("java", package = "mailR")
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library(mailR)
sender <- "hannahhjbull@gmail.com"
recipients <- c("hannah.bull@ens-paris-saclay.fr")
send.mail(from = sender,
to = recipients,
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "hannahhjbull@gmail.com",
passwd = "Singapore09", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
library('FactoMineR')
library('tidytext')
library('stopwords')
version
install.packages('tidytext', dependencies = TRUE)
install.packages("tidytext", dependencies = TRUE)
version()
version
R --version
set.seed(123)
generate_data <- function(N=500, k=50, true_beta=1) {
b=1/(1:k)
# = Generate covariance matrix of w = #
sigma=genPositiveDefMat(k,"unifcorrmat")$Sigma
sigma=cov2cor(sigma)
w=rmvnorm(N,sigma=sigma) # Generate w
g=as.vector(cos(w%*%b)^2) # Generate the function g
m=as.vector(sin(w%*%b)+cos(w%*%b)) # Generate the function m
x=m+rnorm(N) # Generate x
y=true_beta*x+g+rnorm(N) # Generate y
dgp = list(y=y, x=x, w=w)
return(dgp)
}
dgp <- generate_data()
X=dgp$x
W=dgp$w
Y=dgp$y
K=5 # use 5 splits as example
SL.library.X = "SL.lm"
SL.library.Y = "SL.lm"
family.X = gaussian()
family.Y = gaussian()
########
head(X) # 500 x 1
head(Y) # 500 x 1
head(W) # 500 x 50
length(unique(Y)) # there are 500 unique Y's
set.seed(123)
generate_data <- function(N=500, k=50, true_beta=1) {
b=1/(1:k)
# = Generate covariance matrix of w = #
sigma=genPositiveDefMat(k,"unifcorrmat")$Sigma
sigma=cov2cor(sigma)
w=rmvnorm(N,sigma=sigma) # Generate w
g=as.vector(cos(w%*%b)^2) # Generate the function g
m=as.vector(sin(w%*%b)+cos(w%*%b)) # Generate the function m
x=m+rnorm(N) # Generate x
y=true_beta*x+g+rnorm(N) # Generate y
dgp = list(y=y, x=x, w=w)
return(dgp)
}
dgp <- generate_data()
X=dgp$x
W=dgp$w
Y=dgp$y
K=5 # use 5 splits as example
SL.library.X = "SL.lm"
SL.library.Y = "SL.lm"
family.X = gaussian()
family.Y = gaussian()
########
head(X) # 500 x 1
head(Y) # 500 x 1
head(W) # 500 x 50
length(unique(Y)) # there are 500 unique Y's
# Installs packages if not already installed, then loads packages
list.of.packages <- c("SuperLearner", "ggplot2", "clusterGeneration", "mvtnorm", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
set.seed(123)
generate_data <- function(N=500, k=50, true_beta=1) {
b=1/(1:k)
# = Generate covariance matrix of w = #
sigma=genPositiveDefMat(k,"unifcorrmat")$Sigma
sigma=cov2cor(sigma)
w=rmvnorm(N,sigma=sigma) # Generate w
g=as.vector(cos(w%*%b)^2) # Generate the function g
m=as.vector(sin(w%*%b)+cos(w%*%b)) # Generate the function m
x=m+rnorm(N) # Generate x
y=true_beta*x+g+rnorm(N) # Generate y
dgp = list(y=y, x=x, w=w)
return(dgp)
}
dgp <- generate_data()
X=dgp$x
W=dgp$w
Y=dgp$y
K=5 # use 5 splits as example
SL.library.X = "SL.lm"
SL.library.Y = "SL.lm"
family.X = gaussian()
family.Y = gaussian()
########
head(X) # 500 x 1
head(Y) # 500 x 1
head(W) # 500 x 50
length(unique(Y)) # there are 500 unique Y's
### STEP 1: split X, W and Y into K random sets
## Make a k length list of X, Y and W splits
# source of function: https://gist.github.com/dsparks/3695362
k_split <- function(df, k) {
folds <- split(sample(nrow(df), nrow(df), replace=F), as.factor(1:k))
lapply(folds, function(idxs) df[idxs, ])
} # Returns K different data frames in a list
Y <- as.data.frame(Y)
Y_k <- k_split(Y,K)
## assign an index value based on Y split to variables
Y$group <- 0
for(ki in 1:K){ # for each split
i <- 1 # set Y index count
for(yi in Y[,1]){
if(yi %in% Y_k[[ki]]){  # see if value of Y in the split
# assign the split index
Y[i,]$group <- ki
}else{
}
i <- i+1
}
}
# Installs packages if not already installed, then loads packages
list.of.packages <- c("SuperLearner", "ggplot2", "clusterGeneration", "mvtnorm", "xgboost")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
list.of.packages <- c("SuperLearner", "ggplot2", "clusterGeneration", "mvtnorm", "xgboost", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# Installs packages if not already installed, then loads packages
list.of.packages <- c("SuperLearner", "ggplot2", "clusterGeneration", "mvtnorm", "xgboost", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
setwd("/home/hannah/repos/pse-ml/lab2/")
# Installs packages if not already installed, then loads packages
list.of.packages <- c("SuperLearner", "ggplot2", "clusterGeneration", "mvtnorm")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
generate_data <- function(N=500, k=50, true_beta=1) {
# DGP from https://www.r-bloggers.com/cross-fitting-double-machine-learning-estimator/
# Generates a list of 3 elements, y, x and w, where y and x are N
# times 1 vectors, and w is an N times k matrix.
#
# Args:
#   N: Number of observations
#   k: Number of variables in w
#   true_beta: True value of beta
#
# Returns:
#   a list of 3 elements, y, x and w, where y and x are N
#   times 1 vectors, and w is an N times k matrix.
b=1/(1:k)
# = Generate covariance matrix of w = #
sigma=genPositiveDefMat(k,"unifcorrmat")$Sigma
sigma=cov2cor(sigma)
w=rmvnorm(N,sigma=sigma) # Generate w
g=as.vector(cos(w%*%b)^2) # Generate the function g
m=as.vector(sin(w%*%b)+cos(w%*%b)) # Generate the function m
x=m+rnorm(N) # Generate x
y=true_beta*x+g+rnorm(N) # Generate y
dgp = list(y=y, x=x, w=w)
return(dgp)
}
### END DGP
set.seed(123) # set seed for replication
dgp <- generate_data()
X = dgp$x
Y = dgp$y
W = dgp$w
K=5
createFolds(X, k = K, list = TRUE, returnTrain = FALSE)
createFolds(Y, k = K, list = TRUE, returnTrain = FALSE)
createFolds(Y, k = K, list = TRUE, returnTrain = FALSE)
folds = createFolds(Y, k = K, list = TRUE, returnTrain = FALSE)
folds
folds[1]
folds[-1]
1 %in% folds[-1]
1 %in% folds[[-1]]
folds[[-1]]
split = folds[1]
split
X[split]
split = as.vector(folds[1])
split
X[split]
dgp <- generate_data()
X = dgp$x
Y = dgp$y
W = dgp$w
X[split]
as.vector(folds[1])
split = folds[1][1]
split
split = folds[[1]]
split
X[split]
X[-split]
split = folds[[3]]
X[split]
X[-split]
folds = createFolds(Y, k = K, list = TRUE, returnTrain = FALSE)
folds
